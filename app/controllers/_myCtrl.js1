

app.controller('myCtrl', function($scope,$q,$http,wikidataAPI,config, wikidataIndex,utilities) {
    $scope.keyword = "human";
    $scope.search=function(){
        //var query ="select ?u where {?u wdt:P31 wd:Q5.} limit 100";
        var query='select ?u ?uLabel where {wd:Q5 wdt:P1963 ?u .  SERVICE wikibase:label {bd:serviceParam wikibase:language "en" .}} limit 10 offset 1';
        sendQuery(query);
    }

    $scope.results=[];
    $scope.numberResults=0;
    $scope.facets=[];
    
    $scope.type="http://www.wikidata.org/entity/Q4022";
    $scope.language="en";
    $scope.limitFacets=10;
    $scope.limitInstances=1000;

    $scope.numberFacetValues=5;//number of facet values are shown at the first time
    $scope.numberNextFacetValues=5;//number of facet values are shown next time.
    $scope.config=config;

    $scope.runningQuery="";
    $scope.indexData={};
    
    $scope.generateInitInterface =function() {
        $scope.type="http://www.wikidata.org/entity/"+$scope.config.keyword;
        $scope.facets=[];

        var preCalculatedFacets= _.propertyOf($scope.indexData.data)($scope.config.keyword);
        if(preCalculatedFacets){
            $scope.facets=[];

            _.each(preCalculatedFacets,function(facet){
                var newFacet={};
                newFacet.text=facet.P;
                newFacet.fullLink=facet.P;
                newFacet.abbrLink=facet.P;
                newFacet.number=facet.Pc;
                newFacet.id=facet.P;
                newFacet.isExpand=false;
                newFacet.iconText='+';
                newFacet.isFirstInit=true;
                newFacet.value=[];
                _.each(facet.Pv, function(facetValue){
                    var newFacetValue={};
                    newFacetValue.text=facetValue.V;
                    newFacetValue.abbrLink=facetValue.V;
                    newFacetValue.number=facetValue.Vc;
                    newFacet.value.push(newFacetValue);
                });
                //console.log(newFacet.id);
                $scope.facets.push(newFacet);
            });
        }
        else {
            var initInterfaceQuery=getInitInterfaceQuery();

            wikidataAPI.sendQuery(initInterfaceQuery)
                .then(
                    function (initInterfaceResult){
                        /*_.each(initInterfaceResult,function(element){
                         var property=element.facet.value;
                         var numberFound=element.numberFound.value;

                         var propertyLabelQuery=getPropertyLabelQuery(property);
                         wikidataAPI.sendQuery(propertyLabelQuery)
                         .then(
                         function(propertyLabelResult){
                         var newFacet={};
                         newFacet.text=propertyLabelResult[0].propertyLabel.value;
                         newFacet.fullLink=property;
                         newFacet.number=numberFound;
                         newFacet.id=property.substring(property.lastIndexOf("/")+1,property.length);
                         newFacet.isExpand=false;
                         newFacet.iconText='+';
                         newFacet.isFirstInit=true;
                         //console.log(newFacet.id);
                         $scope.facets.push(newFacet);
                         },
                         function(error){
                         console.log('error propertyLabelQuery'+error);
                         }
                         );
                         });
                         */
                        var promises=[];
                        _.each(initInterfaceResult,function(element){
                            var property=element.facet.value;
                            var numberFound=element.numberFound.value;
                            var propertyLabelQuery=getPropertyLabelQuery(property);
                            promises.push(wikidataAPI.sendQuery(propertyLabelQuery));
                        });
                        $q.all(promises).then(function(data){
                            _.each(data,function(propertyLabelResult,index){
                                var newFacet={};
                                var property=initInterfaceResult[index].facet.value;
                                var numberFound=initInterfaceResult[index].numberFound.value;
                                newFacet.text=propertyLabelResult[0].propertyLabel.value;
                                newFacet.fullLink=property;
                                newFacet.number=numberFound;
                                newFacet.id=property.substring(property.lastIndexOf("/")+1,property.length);
                                newFacet.isExpand=false;
                                newFacet.iconText='+';
                                newFacet.isFirstInit=true;
                                //console.log(newFacet.id);
                                $scope.facets.push(newFacet);
                            })
                        });
                    },
                    function (error){
                        console.log('error initInterfaceQuery'+error);
                    }
                );

        }
        
        getResults();

    }

    var showFacetValue = function($event,facet){
        $event.stopPropagation();
        var preCalculatedFacets= _.propertyOf($scope.indexData.data)($scope.config.keyword);
        if(preCalculatedFacets){

        }
        else{
            var facetValue=[];
            var facetValueQuery='select ?facetValue (count (?facetValue) as ?numberInstances) \
        where \
        { \
            ?item wdt:P31 <'+ $scope.type +'>. \
            ?item <'
                + facet.fullLink
                + '> ?facetValue \
        } \
        group by ?facetValue \
            order by DESC (?numberInstances) \
        limit '+ $scope.numberFacetValues;

            wikidataAPI.sendQuery(facetValueQuery)
                .then(
                    function(facetValueResult){

                        _.each(facetValueResult,function(element) {
                            //facetValue.push({type:'String',value:element.u.value,isCheck:true});
                            var fullLink=element.facetValue.value;
                            var number=element.numberInstances.value;
                            var numberFacetValues=$scope.numberFacetValues;
                            itemLabelQuery=getItemLabelQuery(element.facetValue.value);
                            wikidataAPI.sendQuery(itemLabelQuery)
                                .then(
                                    function(itemLabelResult){
                                        var newFacetValue={};
                                        if(itemLabelResult[0]){
                                            newFacetValue.text=itemLabelResult[0].itemLabel.value;
                                        }
                                        else{
                                            newFacetValue.text=getEntityId(fullLink)
                                        }
                                        newFacetValue.fullLink=fullLink;
                                        newFacetValue.number=number;
                                        newFacetValue.isCheck=false;
                                        facetValue.push(newFacetValue);
                                    }
                                )
                        });
                        facet.value=facetValue;
                    }
                );

        }


    };

    $scope.ctToogleEvent = function ($event,facet){
        $event.stopPropagation();
        if(facet.isExpand){
            facet.isExpand=false;
            facet.iconText='+';
            return;
        }
        else{
            facet.isExpand=true;
            facet.iconText='-';
            if(facet.isFirstInit){
                showFacetValue($event,facet);
            }

        }
    };
    $scope.showHideFacet=function($event,fInterface){
        $event.stopPropagation();
        if(fInterface.isExpand){
            fInterface.isExpand=false;
            fInterface.iconText='+';
        }
        else{
            fInterface.isExpand=true;
            fInterface.iconText='-';
        }
    }
    $scope.showResult =function(){
        getResults();

    };

   
    var getInitInterfaceQuery=function(){
        var query='Select ?facet (count (?facet) as ?numberFound) \
            where { \
             hint:Query hint:optimizer "None" . \
            { select ?item  where { ?item wdt:P31 <'+ $scope.type + '>. } limit ' + $scope.limitInstances + '  } \
            ?item ?facet ?value. \
             filter strstarts(str(?facet),"http://www.wikidata.org/prop/direct") \
             } \
            group by ?facet  \
            order by DESC (?numberFound) \
            limit ' + $scope.limitFacets;
        $scope.runningQuery=query;
        return query;
    }

    var getResultQuery=function(){
        var strQueryFacetValue=[];
        var strQueryFacet=[];
        var strQueryUnion="";

        _.each($scope.facets,function(facet){
            var property=facet.abbrLink;
            strQueryFacetValue=[];
            strQueryUnion="";
            _.each(facet.value,function(facetValue){
                if(facetValue.isCheck){
                    strQueryFacetValue.push( '{?item wdt:'+property+' wd:'+facetValue.abbrLink+'}');
                }
            });
            if(strQueryFacetValue.length>0){
                strQueryUnion=strQueryUnion+ "{"+ strQueryFacetValue.join(" UNION ") +"}";
                strQueryFacet.push(strQueryUnion);
            }
        });


        var resultQuery='select ?item \
        where \
        { \
            ?item wdt:P31 <' + $scope.type + '>.'
            + strQueryFacet.join(".")
            +' } \
        limit 50';
        $scope.runningQuery=resultQuery;
        return resultQuery;
    }

    var getPropertyLabelQuery=function (property){
        var query='SELECT ?propertyLabel \
                    WHERE \
                    { \
                        ?property ?ref <' + property + '>.'
                        + '  ?property rdfs:label ?propertyLabel. FILTER (lang(?propertyLabel) = "'+$scope.language+'") \
                    }';
        return query;
    }

    var getItemLabelQuery=function(item){
        var query= 'select ?itemLabel \
            where \
        {'
        + '<'+ item + '> rdfs:label ?itemLabel \
            filter LANGMATCHES(LANG(?itemLabel), "' + $scope.language + '") \
        } \
        limit 1';
        return query;
    }

    var getEntityId=function(entity){
        return entity.substring(entity.lastIndexOf("/")+1,entity.length);
    }

    var getItemLabel=function(item){

    }

    var showQualifierValue=function(facet,facetValue){
        var typeObject=_.propertyOf($scope.indexData.data)($scope.config.keyword);
        
        var facetObject=_.find(typeObject,function(element){return element.P==facet.abbrLink; });
        
        var facetValueObject=_.find(facetObject.Pv,function(element){return element.V==facetValue.abbrLink; });
        
        var qualifierArray=facetValueObject.Q;
        if(qualifierArray){
            facetValue.isExpand=true;
            facetValue.Qualifiers=[];
            _.each(qualifierArray,function(element){
                var newQualifier={};
                newQualifier.text=element.Qp;
                newQualifier.fullLink=element.Qp;
                newQualifier.Values=[];
                _.each(element.Qv,function(qualifierValue){
                    var newObject={};
                    newObject.text=qualifierValue.V;
                    newQualifier.Values.push(newObject);
                });
                facetValue.Qualifiers.push(newQualifier);
            });
        }


        
    }
    //for tree view

    $scope.reGenerateInterface=function(){
      console.log($scope.facets);
    };

    $scope.showQualifier =function ($event,facet,facetValue){
        $event.stopPropagation();
        showQualifierValue(facet,facetValue);

    }

    $scope.delete =function($event,facet){
        $event.stopPropagation();
        var newFacets=_.without($scope.facets,_.findWhere($scope.facets,{fullLink:facet.fullLink}));
        $scope.facets=newFacets;
    }

    $scope.addFacetValueCondition=function($event,fValues){
        var newValue={};
        newValue["condition"]="<=";
        newValue["threshold"]="1995";
        newValue["isSelected"]=true;
        fValues.values.push(newValue);
    }
    var getResults=function(){
        $scope.results=[];

        var resultQuery=getResultQuery();

        wikidataAPI.sendQuery(resultQuery)
            .then(
                function(result){
                    $scope.results=result;
                }
            );

    }
    // at the bottom of your controller
    var init = function () {

        wikidataIndex.getIndexFile().then(
            function(returnedData){
                $scope.indexData=returnedData;
            }
        );
        utilities.getFacets().then(
            function(facetModel){
                $scope.facets=facetModel;
            }
        )
    };
// and fire it after definition
    init();


});